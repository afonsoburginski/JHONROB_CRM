generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum Role {
  ADMIN
  USER
}
// schema.prisma
model User {
  id            Int            @id @default(autoincrement())
  name          String?
  email         String         @unique
  password      String
  image         String?
  role          Role           @default(USER)
}

model Client {
  id              Int            @id @default(autoincrement())
  name            String
  email           String
  phone           String
  address         String
  city            String
  state           String
  zip             String
  cpfCnpj         String
  ie              String
  proposes        Propose[]
}

model Company {
  id              Int            @id @default(autoincrement())
  name            String
}

model Installment {
  id              Int            @id @default(autoincrement())
  numberOfInstallments Int
  interestRate    Float
  paymentMethodId Int
  PaymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
}

model PaymentMethod {
  id              Int            @id @default(autoincrement())
  title           String
  Installments    Installment[]
}

model Bank {
  id              Int            @id @default(autoincrement())
  title           String
  agency          String
  account         String
}

model Group {
  id        Int        @id @default(autoincrement())
  title     String     @unique
  products  Product[]
}

model Product {
  id         Int       @id @default(autoincrement())
  title      String    @unique
  groupId    Int
  group      Group     @relation(fields: [groupId], references: [id])
  models     Model[]
  types      Type[]
}
model Type {
  id           Int        @id @default(autoincrement())
  title        String
  productId    Int
  product      Product   @relation(fields: [productId], references: [id])
}

model Model {
  id           Int        @id @default(autoincrement())
  title        String
  productId    Int
  product      Product   @relation(fields: [productId], references: [id])
  capacities   Capacity[]
}


model Capacity {
  id         Int      @id @default(autoincrement())
  title      String
  modelId    Int
  model      Model    @relation(fields: [modelId], references: [id])
  heights    Height[]
}

model Height {
  id         Int       @id @default(autoincrement())
  title      String
  recommended Boolean
  capacityId Int
  capacity   Capacity @relation(fields: [capacityId], references: [id])
  powers     Power[]
}

model Power {
  id          Int      @id @default(autoincrement())
  title       String
  recommended Boolean
  heightId    Int
  height      Height  @relation(fields: [heightId], references: [id])
}

model InputOutput {
  id        Int      @id @default(autoincrement())
  input     String
  output    String
}

model Propose {
  id            Int            @id @default(autoincrement())
  title         String
  content       String
  createdAt     DateTime       @default(now())
  observation   String?
  clientId      Int?           
  client        Client?        @relation(fields: [clientId], references: [id])
  productSelections ProductSelection[]
}

model ProductSelection {
  id            Int            @id @default(autoincrement())
  groups        String
  product       String
  type          String
  model         String
  capacity      String
  height        String
  power         String
  input         String
  output        String
  proposeId     Int
  propose       Propose        @relation(fields: [proposeId], references: [id])
}