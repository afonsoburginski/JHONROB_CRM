generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
  // url = env("POSTGRES_PRISMA_URL")
  // directUrl = env("POSTGRES_URL_NON_POOLING")
}


enum Role {
  ADMIN
  USER
}
// schema.prisma
model User {
  id            Int            @id @default(autoincrement())
  name          String?
  email         String         @unique
  password      String
  image         String?
  role          Role           @default(USER)
}

model Client {
  id              Int            @id @default(autoincrement())
  name            String
  email           String
  phone           String
  address         String
  city            String
  state           String
  zip             String
  cpfCnpj         String
  ie              String
  proposes        Propose[]
}

model Company {
  id              Int            @id @default(autoincrement())
  name            String
  cnpj            String
  ie              String
  address         String
}

model Installment {
  id              Int            @id @default(autoincrement())
  numberOfInstallments Int
  interestRate    Float
  paymentMethodId Int
  PaymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
}

model PaymentMethod {
  id              Int            @id @default(autoincrement())
  title           String
  Installments    Installment[]
}

model Bank {
  id              Int            @id @default(autoincrement())
  title           String
  agency          String
  account         String
}

model Group {
  id        Int        @id @default(autoincrement())
  title     String     @unique
  products  Product[]
}

model Product {
  id          Int       @id @default(autoincrement())
  title       String    @unique
  description String?
  tag         String
  groupId     Int
  group       Group     @relation(fields: [groupId], references: [id])
  models      Model[]   // Muitos-para-muitos relação com Model
  types       Type[]    // Muitos-para-muitos relação com Type
}
model Type {
  id           Int       @id @default(autoincrement())
  title        String    @unique
  products     Product[] // Muitos-para-muitos relação com Product
}

model Model {
  id           Int       @id @default(autoincrement())
  title        String    @unique
  products     Product[] // Muitos-para-muitos relação com Product
  capacities   Capacity[]
}


model Capacity {
  id         Int      @id @default(autoincrement())
  title      String   @unique
  modelId    Int
  model      Model    @relation(fields: [modelId], references: [id])
  heights    Height[]
}

model Height {
  id         Int       @id @default(autoincrement())
  title      String    @unique
  recommended Boolean
  capacityId Int
  capacity   Capacity @relation(fields: [capacityId], references: [id])
  powers     Power[]
}

model Power {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  recommended Boolean
  heightId    Int
  height      Height  @relation(fields: [heightId], references: [id])
}

model InputOutput {
  id        Int      @id @default(autoincrement())
  input     String
  output    String
}

model Propose {
  id            Int            @id @default(autoincrement())
  title         String
  content       String
  createdAt     DateTime       @default(now())
  observation   String?
  clientId      Int?           
  client        Client?        @relation(fields: [clientId], references: [id])
  productSelections ProductSelection[]
  paymentInfo  PaymentInfo[]
}

model PaymentInfo {
  id            Int            @id @default(autoincrement())
  company       String
  cnpj          String
  ie            String
  address       String
  paymentMethod String
  installments  String
  salesPeople   String
  bank          String
  bankAgency    String
  accountNumber String
  proposeId     Int
  propose       Propose        @relation(fields: [proposeId], references: [id])
}

model ProductSelection {
  id                Int            @id @default(autoincrement())
  groups            String
  product           String
  description       String?
  tag               String
  type              String
  model             String
  capacity          String
  height            String
  power             String
  input             String
  output            String
  observation       String?
  manufacturingTime DateTime?
  assemblyTime      DateTime?
  proposeId         Int
  propose           Propose        @relation(fields: [proposeId], references: [id])
}